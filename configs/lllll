# Start monitoring
# zmodload zsh/zprof

# Instant prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Defer
source ~/zsh-defer/zsh-defer.plugin.zsh

# Path to Oh My Zsh
export ZSH="$HOME/.oh-my-zsh"

# Set Oh My Zsh theme
ZSH_THEME="powerlevel10k/powerlevel10k"

# Pre configuration for plugins
MAGIC_ENTER_GIT_COMMAND=' '
MAGIC_ENTER_OTHER_COMMAND=' '
export HISTORY_START_WITH_GLOBAL=true
export PER_DIRECTORY_HISTORY_TOGGLE='^[h'
zstyle '*:compinit' arguments -i -u -C
bindkey ' ' magic-space

# Plugins
plugins=(
  git
  sudo
  tmux
  tmux-cssh
  aliases
  alias-finder
  zsh-no-ps2
  zsh-syntax-highlighting
  zsh-autosuggestions
  zsh-navigation-tools
  fzf-zsh-plugin
  fzf-tab
  history
  dirhistory
  per-directory-history
  last-working-dir
  zoxide
  jump
  wd
  k
  direnv
  copypath
  cp
  safe-paste
  transfer
  extract
  universalarchive
  colored-man-pages
  fancy-ctrl-z
  globalias
  magic-enter
  httpie
  urltools
  web-search
  nmap
  jq
  jsontools
  percol
  gpg-agent
  ssh-agent
  ssh
  systemadmin
  zsh-prompt-benchmark
  profiles
)

# Delayed plugin loading
zsh-defer eval "$(keychain --eval --quiet)"

# Completetion configuration
fpath=(~/.cache/completions $fpath)
fpath+=("${ZSH_CUSTOM:-${ZSH:-$HOME/.oh-my-zsh}/custom}/plugins/zsh-completions/src")

# Blank line
# preexec() {echo}

# preexec() {
#   printf '\e[?25l'  # hide before command
# }
# precmd() {
#   tput civis
# }

# # Show cursor again after prompt is fully drawn
# zle-line-init() {
#   printf '\e[?25h'  # only show cursor, no blink toggle
#   zle -R
# }
# zle -N zle-line-init




# Source Oh My Zsh
source $ZSH/oh-my-zsh.sh

# Source Powerlevel
source ~/.p10k.zsh


# Completion configuration
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' rehash true
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache

# Argc comfiguration, argc_scripts=(... ...)
export ARGC_COMPLETIONS_ROOT="/home/kali/.config/argc-completions"
export ARGC_COMPLETIONS_PATH="$ARGC_COMPLETIONS_ROOT/completions/linux:$ARGC_COMPLETIONS_ROOT/completions"
export PATH="$ARGC_COMPLETIONS_ROOT/bin:$PATH"
argc_scripts=( $(ls -p -1 "$ARGC_COMPLETIONS_ROOT/completions/linux" "$ARGC_COMPLETIONS_ROOT/completions" | sed -n 's/\.sh$//p') )
source <(argc --argc-completions zsh $argc_scripts)

# Autosuggestions configuration
ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(bracketed-paste)
ZSH_AUTOSUGGEST_STRATEGY=(history)
ZSH_AUTOSUGGEST_USE_ASYNC=true
bindkey '\e[1;3C' autosuggest-execute

# Shell integrations
# [ ! -f "$HOME/.x-cmd.root/X" ] || . "$HOME/.x-cmd.root/X"
source "${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-async/async.zsh"
[ -s ~/.config/envman/PATH.env ] && source ~/.config/envman/PATH.env # Webi 
[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"
export NIX_CONFIG="experimental-features = nix-command flakes"
. "$HOME/.atuin/bin/env"
eval "$(atuin init zsh --disable-up-arrow | sed 's/atuin history start -- "$1"/atuin history start -- "$2"/')"


# History
HISTSIZE=10000
SAVEHIST=$HISTSIZE
HISTFILE=~/.zsh_history
HISTDUP=erase
setopt APPEND_HISTORY
setopt SHARE_HISTORY
setopt HIST_IGNORE_SPACE
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_SAVE_NO_DUPS
setopt HIST_FIND_NO_DUPS
setopt HISTFCNTLLOCK
setopt HIST_REDUCE_BLANKS

# Options
unsetopt CORRECT
unsetopt CORRECT_ALL
setopt INTERACTIVE_COMMENTS
setopt NUMERIC_GLOB_SORT
setopt RECEXACT
setopt GLOBDOTS
setopt GLOB_COMPLETE
setopt GLOBSTARSHORT
setopt EXTENDED_GLOB
setopt NO_CASE_GLOB
setopt RCEXPANDPARAM
setopt SUNKEYBOARDHACK
setopt NOBEEP

DISABLE_AUTO_TITLE=true
DISABLE_AUTO_UPDATE="true"
DISABLE_MAGIC_FUNCTIONS="true"


# Aliases
unalias x 2>/dev/null

alias b="batcat --paging=never --theme=ansi"
alias ba="batcat --paging=never --theme=ansi --style=changes"
alias fd="fdfind"
alias ls="eza --group-directories-first --header --icons --group"
alias qq="xsel --clipboard <"
alias cop="copypath"
alias j="jump"

mkcd() {mkdir -p -- "$1" && cd -- "$1"}
alias i="sudo apt-get install -y"
alias sn="sudo nano"
alias sm="sudo nano +-1"
alias rc="sudo nano +-1 ~/.zshrc && re"
alias p1="sudo nano ~/.p10k.zsh"
alias s="sudo -E zsh"
alias ex="extract"
alias ch="sudo chmod +x"
alias de="sudo rm -rf"
alias ki="ps aux | fzf --multi | awk '{print \$2}' | xargs -r sudo kill -15"
alias top="sudo XDG_CONFIG_HOME=$HOME/.config btop"
alias re="omz reload"
alias so="source ~/.zshrc"

alias e="/mnt/c/Windows/explorer.exe ."
alias pale="palemoon/./palemoon"

alias txs="tmuxinator start"
alias txo="tmuxinator open"	
alias txn="tmuxinator new"	
alias txl="tmuxinator list"

alias utf='export LC_ALL=en_US.UTF-8'
alias icon="column -mts ',' -o $'\t' ~/.config/icons/index.csv | fzf -d '\t' --with-nth=1,2,3,4 --header-lines=1 --bind 'enter:execute(echo {1})+abort,ctrl-q:execute-silent(echo -n {1} | xclip -selection clipboard)'" 
perm() {local target="${1:-.}"; sudo chown -R "$USER:$USER" "$target"; sudo chmod -R u+rwX,go+rX "$target"; echo "Permissions fixed"}

alias da="rclone copy Drive:/Linux/AWS/Files/ ~/files/ --include '*' -P"
alias ua="rclone copy ~/files/ Drive:/Linux/AWS/Files/ --include '*' -P"
dl() {local source="Drive:Linux/AWS/Files/"; local destination="~/files/"; file="$1"; rclone copy "${source}${file}" "${destination}";}
ul() {local source=""; local destination="Drive:Linux/AWS/Files/"; source="$1"; rclone copy "${source}" "${destination}";}
0x() {curl -F file=@"$1" -F expires=168 https://0x0.st}
u() {curl -s -F "files[]=@$1" https://uguu.se/upload | jq -r '.files[0].url'}
alias ws="wormhole send"


# Fzf configuration
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# source <(fzf --zsh)

my-fzf-tab() {
  functions[compadd]=$functions[-ftb-compadd]
  zle fzf-tab-complete
}

zle -N my-fzf-tab
bindkey "^I" my-fzf-tab

# Fzf-tab styling

zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --tree --level=3 --color=always ${realpath}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:*' use-fzf-default-opts yes
zstyle ':fzf-tab:*' fzf-flags --height ~100%
zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
zstyle ':fzf-tab:*' popup-pad 100 100
zstyle ':fzf-tab:*' popup-min-size 20 10
zstyle ':completion:*:git-checkout:*' sort false
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':fzf-tab:*' switch-group '<' '>'



# Fuzzy finder defaults
export FZF_DEFAULT_OPTS="
  --color=fg:#dadce9,fg+:#e9e9e9,bg:#292d3e,bg+:#33394f
  --color=hl:#c8ff9e,hl+:#baffe7,info:#ae98ff,marker:#ae98ff
  --color=prompt:#292d3e,spinner:#ae98ff,pointer:#ae98ff,header:#82AAFF
  --color=gutter:#292d3e,border:#343b54,scrollbar:#343b54,preview-bg:#292d3e
  --color=preview-border:#31374f,preview-scrollbar:#31374f,preview-label:#31374f,label:#31374f,query:#c8ff9e
  --border=rounded --preview-window=border-rounded --prompt='  ' 
  --marker='▌' --pointer='▌' --border-label='' --separator='' --scrollbar='' --info=default
  --bind 'ctrl-l:clear-query,home:first,end:last,enter:accept-non-empty,right:accept-non-empty,right:accept-non-empty,left:close'
  --tmux center
"

export BAT_THEME=ansi

export FZF_TMUX=1
export FZF_TMUX_OPTS=""

# Adjust background color based on environment
if [[ "$TERM_PROGRAM" == "vscode" ]]; then
  export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --color=bg:#1f2335,preview-bg:#1f2335,gutter:#1f2335"
fi 

# export FZF_DEFAULT_COMMAND="fdfind -H -t d --follow -E /mnt/c -E .git"
# export FZF_DEFAULT_COMMAND="locate -i '' | grep -vE '/mnt/|\.git/'"


# Fuzzy search
f() {
  fzf --multi --exact --layout=reverse --info=default --border --height=70% \
      --preview "batcat --paging=never --theme=ansi --style=numbers --color=always {}" \
      --preview-window "right,50%" \
      --bind "pgdn:page-down,pgup:page-up" \
      --bind "ctrl-q:execute-silent(cat {+} | xclip -selection clipboard)+reload(fdfind -t f --hidden)" \
      --bind "ctrl-x:execute(trash {+})+reload(find . -type f)" \
      --bind "ctrl-n:become(sudo nano {+})" \
      --bind "ctrl-r:become(source {+})"
}

# Custom fuzzy search
fzf-find-widget() {
  local dir="${1:-$PWD}"

  locate "$dir" | awk -v dir="$dir" '$0 ~ dir {sub(dir "/?", ""); print}' | \
  fzf --multi --exact --layout=reverse --info=default --border --height=70% \
      --preview 'batcat --paging=never --theme=ansi --style=numbers --color=always {}' \
      --preview-window 'right,50%' \
      --bind 'pgdn:page-down,pgup:page-up' \
      --bind 'ctrl-n:become(sudo nano {+})' \
      --bind "shift-left:reload(locate / | awk '{print}')" \
      --bind "shift-right:reload(locate '$dir' | awk -v dir='$dir' '\$0 ~ dir {sub(dir \"/?\", \"\"); print}')"

  echo -e "\r"
  zle redisplay
}

# Fuzzy search in file
ff() {
  local RG_PREFIX="rg --line-number --no-heading --color=always --smart-case --hidden --glob '!**/.git/*'"
  local INITIAL_QUERY="${*:-}"

  fzf --layout=reverse --multi --info=default --border --height=100% \
      --ansi --disabled --query "$INITIAL_QUERY" \
      --bind "start:reload:$RG_PREFIX {q}" \
      --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
      --delimiter : \
      --preview 'batcat --theme=base16 --style="numbers" --color=always {1} --highlight-line {2}' \
      --preview-window 'down,35%,+{2}-3' \
      --bind 'enter:become(sudo nano -Y sh $(for f in {+}; do echo "+$(cut -d: -f2 <<< $f) $(cut -d: -f1 <<< $f)"; done))'
}

# Fuzzy history search
fzf-history-widget() {
  local selected_cmd

  selected_cmd=$(fc -rln 1 | fzf --height=70% --exact --no-sort --query "$LBUFFER" \
    --expect enter,ctrl-a,right,left \
    --bind 'ctrl-q:execute-silent(echo -n {} | xclip -selection clipboard)')

  key=$(head -n1 <<< "$selected_cmd")
  selected_cmd=$(tail -n +2 <<< "$selected_cmd")

  case "$key" in
    enter)
      BUFFER="$selected_cmd"
      zle accept-line
      ;;
    ctrl-a)
      BUFFER="$selected_cmd"
      CURSOR=0
      zle redisplay
      ;;
    right)
      BUFFER="$selected_cmd "
      CURSOR=$#BUFFER
      zle redisplay
      ;;
    left)
      BUFFER="${selected_cmd% *}"
      CURSOR=$#BUFFER
      zle redisplay
      ;;
    *)
      BUFFER=""
      zle redisplay
      ;;
  esac
}

# Fuzzy change directory
fzf-cd-widget() {
  local dir="${1:-$PWD}"
  local temp_dir

  temp_dir=$(
    find "$dir" -type d -printf "%P\n" 2>/dev/null | \
    fzf --layout=reverse --exact --height=80% \
        --preview "eza --tree --level=3 --color=always '$dir/{}'" \
        --preview-window=right:50%:wrap --ansi \
        --bind "shift-left:reload(find / -type d 2>/dev/null)" \
        --bind "shift-right:reload(find '$dir' -type d -printf '%P\n' 2>/dev/null)+change-query()" \
  )

  if [[ -n "$temp_dir" ]]; then
    cd "$temp_dir" || return
    zle accept-line
  else
    zle redisplay
  fi
}

tes() {
  result=$(fdfind -t d -E "/mnt" | fzf $1)
  cd $result
  unset result
}


# Custom function to replace __fzf_generic_path_completion without reset-prompt
# __custom_fzf_generic_path_completion() {
#   local base lbuf cmd compgen fzf_opts suffix tail dir leftover matches
#   base=$1
#   lbuf=$2
#   cmd=$(__fzf_extract_command "$lbuf")
#   compgen=$3
#   fzf_opts=$4
#   suffix=$5
#   tail=$6

#   setopt localoptions nonomatch
#   eval "base=$base"
#   [[ $base = *"/"* ]] && dir="$base"
#   while [ 1 ]; do
#     if [[ -z "$dir" || -d ${dir} ]]; then
#       leftover=${base/#"$dir"}
#       leftover=${leftover/#\/}
#       [ -z "$dir" ] && dir='.'
#       [ "$dir" != "/" ] && dir="${dir/%\//}"
#       matches=$(eval "$compgen $(printf %q "$dir")" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-60%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_COMPLETION_OPTS" __fzf_comprun "$cmd" ${(Q)${(Z+n+)fzf_opts}} -q "$leftover" | while read item; do
#         echo -n "${(q)item}$suffix "
#       done)
#       matches=${matches% }
#       if [ -n "$matches" ]; then
#         LBUFFER="$lbuf$matches$tail"
#       fi
#       break
#     fi
#     dir=$(dirname "$dir")
#     dir=${dir%/}/
#   done
# }

# _custom_fzf_compgen_files_only() {
#   fd --type f --hidden --follow --no-ignore --exclude ".git" --max-depth 1 . "$1"
# }

# _fzf_complete_cat() {
#   __custom_fzf_generic_path_completion "$prefix" "$1" _custom_fzf_compgen_files_only \
#     "-m" "" " "
# }

# compdef _fzf_complete_cat cat

_fzf_complete_cat() {
  _fzf_complete --multi --reverse --prompt="cat> " -- "$@" < <(
    find . -type f -print
  )
}


fzf-recency() {
  local dir=$(zoxide query -l | fzf --height=80% --reverse)
  
  if [[ -n "$dir" ]]; then
    cd "${dir/#\~/$HOME}"  
    zle .accept-line 
  else
    zle redisplay
  fi
}

# Truncate prompt length
function short_dir() {
  TRUNCATE_ON=$(( (TRUNCATE_ON + 1) % 3 ))
  p10k reload
  zle accept-line
}

function lg() {
  export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir
  lazygit "$@"

  if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
    cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
    rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
  fi
}

function y() {
  # zle -I       
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
  # zle accept-line 
}

function yazi-cd-widget() {
  zle -I                    
  y                        
  zle accept-line 
}

# Run multiple background jobs
asy () {
  local worker_name=$1
  shift

  async_init 
  async_start_worker $worker_name -n

  for prog in "$@"; do
    async_job $worker_name $prog
  done
}


# Activate widgets
zle -N fzf-find-widget
zle -N fzf-history-widget
zle -N fzf-cd-widget
zle -N fzf-recency
zle -N y    

zle -N short_dir

# Hotkeys
bindkey '^F' fzf-find-widget
bindkey "${key[Up]}" fzf-history-widget
bindkey "\e[5~" fzf-cd-widget
bindkey "\e[6~" fzf-recency
bindkey "${key[Down]}" y

bindkey -s "^[-" "~/"
bindkey '^Z' undo
bindkey '^S' short_dir

# Various
# export LC_ALL="C"
WORDCHARS="_.;~-*^|!?&#$%[](){}<>"
PROMPT_EOL_MARK=""
unsetopt PROMPT_SP
export LS_COLORS="$(echo $LS_COLORS | sed 's/01;/00;/g')"
ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=red'

# Defaults
export EDITOR=nano
export VISUAL=nano
export LANG=en_US.UTF-8
export XDG_SESSION_TYPE=x11

# PATH
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.local/share/gem/ruby/3.3.0/bin:$PATH"


pokemon=(
  "volbeat" "duskull" "haunter" "hoppip" "lickitung" "vileplume" "butterfree" "dugtrio"
  "poliwag" "rapidash" "dewgong" "gengar" "onix" "koffing" "charizard" "arbok" "pikachu"
  "mr.mime" "magikarp" "dragonite" "s:gyarados" "mew" "mewtwo" "muk" "crobat" "s:azumarill"
  "unown-india" "unown-oscar" "unown-exclamation" "mantine" "entei" "ho-oh" "blaziken"
  "beautifly" "cascoon" "ludicolo" "seedot" "wingull" "surskit" "loudred" "azurill"
  "volbeat" "roselia" "wailmer" "s:spoink" "spinda" "cacnea" "seviper" "s:whiscash"
  "milotic" "castform-snowy" "chimecho" "salamence" "s:regirock" "metagross" "kyogre-primal"
  "groudon" "rayquaza" "deoxys" "empoleon" "burmy-sandy" "honchkrow" "spiritomb" "garchomp"
  "drapion" "lumineon" "magnezone" "electivire" "gliscor" "s:dusknoir" "froslass" "uxie"
  "s:giratina" "arceus-ghost"
)

alias poke='pokeshell -a "${pokemon[$((RANDOM % ${#pokemon[@]}))]}"'

# Timer
# for i in $(seq 1 10); do time zsh -i -c exit; done

# End monitoring
# zprof
