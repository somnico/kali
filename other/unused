###############
### install ###
###############

# Change original sorting file
sudo sed -i -e "s/<U002E> IGNORE;/<U002E> <RES-1>;/" -e "s/<U005F> IGNORE;/<U005F> <BLK>;/" -e "s/<U0021> IGNORE;/<U0021> <MIN>;/" /usr/share/i18n/locales/iso14651_t1_common
echo "en_US.UTF-8 UTF-8" | sudo tee -a /etc/locale.gen
sudo locale-gen
sudo dpkg-divert --divert /usr/share/i18n/locales/iso14651_t1_common.packaged --no-rename /usr/share/i18n/locales/iso14651_t1_common

# Install plugins
git clone https://github.com/supercrabtree/k ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/k
git clone https://github.com/b0o/zsh-extras ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-extras

# Configure plugins
sudo curl -o ~/.oh-my-zsh/plugins/tmux/tmux.only.conf https://raw.githubusercontent.com/somnico/kali/master/configs/tmux.only.conf

# Install python
python3 -m pip install --upgrade pip setuptools wheel --no-warn-script-location

# Shodan workaround
source ~/.local/share/pipx/venvs/shodan/bin/activate
sudo pip install --break-system-packages --upgrade setuptools
pipx install shodan --pip-args="--upgrade setuptools"
shodan init ...

# Old yara yextend
sudo apt-get install -y autoconf libarchive-dev libpcre3-dev uuid-dev poppler-utils 
mkdir -p "$HOME/tools/yara/yextend"
cd $HOME/tools/yara/
wget https://github.com/BayshoreNetworks/yextend/archive/refs/tags/1.6.tar.gz
tar -xvzf 1.6.tar.gz -C yextend --strip-components=1
rm 1.6.tar.gz
cd yextend
pyenv install 3.8.0
$HOME/.pyenv/versions/3.8.0/bin/python -m venv ~/tools/yara/yextend/venv
source $HOME/tools/yara/yextend/venv/bin/activate
pip install nose
chmod +x build.sh
./build.sh
deactivate

# Full openvas installation
sudo apt-get -y install gvm
sudo gvm setup

# Install encryption tools
kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.29.0/controller.yaml


# Install Docker
echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian bookworm stable" | sudo tee /etc/apt/sources.list.d/docker.list
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo apt update
sudo apt install -y docker-ce docker-ce-cli docker-compose-plugin containerd.io
sudo systemctl enable docker
sudo systemctl start docker
sudo usermod -aG docker $USER

# Install docker cli for desktop compatibility
sudo apt install -y docker.io
sudo mount --make-shared /  

# Go alternate install
wget https://go.dev/dl/go1.24.4.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf go1.22.3.linux-amd64.tar.gz
rm -rf go1.22.3.linux-amd64.tar.gz

# Install Homebrew
yes "" | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

# Install spack
git clone -c feature.manyFiles=true --depth=2 https://github.com/spack/spack.git ~/spack  

#Install helpers
git clone https://github.com/babarot/enhancd ~/.enhancd

curl https://raw.githubusercontent.com/jarun/advcpmv/master/install.sh --create-dirs -o ./advcpmv/install.sh && (cd advcpmv && sh install.sh)
sudo cp ./advcpmv/adv{cp,mv} /usr/local/bin/

# Install email clients
sudo snap install thunderbird

# Fix autocomplete freezes
cd $ZSH_CUSTOM/plugins/zsh-autocomplete
git fetch --unshallow
git restore run-tests.zsh
cd ~

# Setup nala
sudo nala fetch --debian sid

# Install bechmark
wget https://github.com/sharkdp/hyperfine/releases/download/v1.19.0/hyperfine_1.19.0_amd64.deb
sudo dpkg -i hyperfine_1.19.0_amd64.deb
sudo rm -rf hyperfine_1.19.0_amd64.deb

# Install dragon
git clone https://github.com/mwh/dragon.git
cd dragon
sudo make install
cd ..
sudo rm -rf dragon

[[mgr.prepend_keymap]]
on = "<C-x>"
run = "shell -- dragon -x -i -T \"$1\" --confirm"
desc = "Open the file in a GUI menu"

# Install wallpaper tools
sudo apt-get install -y variety

wget https://github.com/cheesecakeufo/komorebi/releases/download/v2.1/komorebi-2.1-64-bit.deb
sudo apt install ./komorebi-2.1-64-bit.deb
rm komorebi-2.1-64-bit.deb

# Setup AWS CLI
expect << 'EOF'
set timeout 10

spawn aws configure

expect {AWS Access Key ID \[*\]:}
send "\r"

expect {AWS Secret Access Key \[*\]:}
send "\r"

expect {Default region name \[*\]:}
send "eu-north-1\r"

expect {Default output format \[*\]:}
send "\r"

expect eof
EOF

# Install browser
wget "https://www.palemoon.org/download.php?mirror=eu&bits=64&type=linuxgtk3" -O palemoon.tar.xz
tar -xvf palemoon.tar.xz
sudo rm -f palemoon.tar.xz

# Yazi alternate installs
sudo snap install yazi --classic --edge

curl -LO https://github.com/sxyazi/yazi/releases/download/v25.4.8/yazi-x86_64-unknown-linux-gnu.zip
unzip yazi-x86_64-unknown-linux-gnu.zip
sudo install -m 755 yazi-x86_64-unknown-linux-gnu/yazi /usr/local/bin/
sudo rm -f yazi-x86_64-unknown-linux-gnu.zip 

# Other file managers
bash -c "$(curl -sLo- https://superfile.netlify.app/install.sh)"
sudo apt-get install -y nnn ranger mc lf
bash <(curl -s https://raw.githubusercontent.com/kamiyaa/joshuto/master/utils/install.sh)

# Install helpers
git clone --depth 1 https://github.com/skim-rs/skim.git ~/.skim
~/.skim/install
mv ~/.skim/bin/sk /usr/local/bin

# Helper configuration
git clone https://github.com/eza-community/eza-themes.git
mkdir -p ~/.config/eza
ln -sf "$(pwd)/eza-themes/themes/default.yml" ~/.config/eza/theme.yml

# Timg manual install
git clone https://github.com/hzeller/timg.git
cd timg
cmake .
make -j$(nproc)
sudo make install
cd ..

# Chafa manual install
git clone https://github.com/hpjansson/chafa.git
./autogen.sh
make
sudo make install

# Fastfetch manual install
git clone https://github.com/fastfetch-cli/fastfetch.git
cd fastfetch
mkdir -p build
cd build
cmake ..
cmake --build . --target fastfetch
sudo cp fastfetch /usr/local/bin/
cd ../..


#############
### zshrc ###
#############

# Set default
chsh -s $(which zsh)

# Updates for Oh My Zsh
omz update
zstyle ':omz:update' mode auto
zstyle ':omz:update' frequency 14

# Pugin configuration
zstyle ':omz:plugins:eza' 'dirs-first' yes
zstyle ':omz:plugins:eza' 'header' yes
zstyle ':omz:plugins:eza' 'show-group' yes
zstyle ':omz:plugins:eza' 'icons' yes
zstyle :omz:plugins:ssh-agent quiet yes
zstyle :omz:plugins:keychain agents gpg,ssh
zstyle :omz:plugins:keychain options --quiet
zstyle :omz:plugins:keychain identities <SSH key filenames in ~/.ssh/> <GPG key ID --list-secret-keys>

# Plugins 
plugins=(
  git
  tmux
  zoxide
  zsh-autocomplete
  fzf-zsh-plugin
  poetry
  poetry-env
  thefuck
  zbell
  catimg
  k
)

# Shell integrations
source ~/.enhancd/init.sh
source /home/kali/.config/broot/launcher/bash/br

source <(afx init)
source <(afx completion zsh)

# Aliases
alias sm="sudo nano +-1"
alias fd="fdfind"
alias utf='export LC_ALL=en_US.UTF-8'
alias pale="palemoon/./palemoon"

alias txs="tmuxinator start"
alias txo="tmuxinator open"	
alias txn="tmuxinator new"	
alias txl="tmuxinator list"


# Not needed
autoload -Uz compinit
zsh-defer compinit -C

# Slow
source ~/spack/share/spack/setup-env.sh
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# Autocomplete alternative install
[[ -r ~/.oh-my-zsh/plugins/znap/znap.zsh ]] || git clone --depth 1 -- https://github.com/marlonrichert/zsh-snap.git ~/.oh-my-zsh/plugins/znap
source ~/.oh-my-zsh/plugins/znap/znap.zsh
znap source marlonrichert/zsh-autocomplete
ZSH_AUTOCOMPLETE_NO_AUTOSUGGEST=1 

# Autocomplete configuration
() {local k; for k in $'\e[A' $'\eOA'; do bindkey "$k" up-line-or-history; done}
bindkey -M menuselect ^M .accept-line
bindkey -r "^[[1;3A"
zstyle ':completion:correct-word:*' max-errors 0
zstyle ':completion:correct-word:*' tag-order '-'


# Autosuggestions configuration
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_COMPLETION_IGNORE="(eza|cat|cd) *"
bindkey '^[n' autosuggest-clear

zle_bracketed_paste=()

zstyle ':bracketed-paste-magic' active-widgets '.self-*'

pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic
}

pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}

zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

# Fzf configuration
source <(fzf --zsh)
enable-fzf-tab

mkdir -p ~/.fzf/shell
sudo ln -s /usr/share/doc/fzf/examples/key-bindings.zsh ~/.fzf/shell/key-bindings.zsh
sudo ln -s /usr/share/doc/fzf/examples/completion.zsh ~/.fzf/shell/completion.zsh

my-fzf-tab() {
  functions[compadd]=$functions[-ftb-compadd]
  zle fzf-tab-complete
}

zle -N my-fzf-tab
bindkey "^I" my-fzf-tab

export FZF_DEFAULT_OPTS="--input-border=rounded"

# Fzf-tab configuration
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color=always ${realpath}'
zstyle ':completion:*' file-patterns '%p'
zstyle ':fzf-tab:*' fzf-flags --height ~90%



# Recent directories
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':completion:*:*:cdr:*:*' menu selection
zstyle ':completion:*' recent-dirs-insert fallback
zstyle ':chpwd:*' recent-dirs-default true
zstyle ':chpwd:*' recent-dirs-max 0
zstyle ':chpwd:*' recent-dirs-file ~/.cache/.chpwd-recent-dirs

dir=$(cdr -l | awk '{$1=""; print substr($0,2)}' | fzf --height=80% --reverse)

# Default p10k dir shorten toggle
short_dir() {
  if [[ -z "$POWERLEVEL9K_SHORTEN_DIR_LENGTH" ]]; then
    typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
  else
    typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=
  fi
  p10k reload
  zle push-line
  zle accept-line
}

# Nnn configuration
BLK="0B" CHR="0B" DIR="04" EXE="06" REG="00" HARDLINK="06" SYMLINK="06" MISSING="00" ORPHAN="09" FIFO="06" SOCK="0B" OTHER="06"
export NNN_FCOLORS="$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER"

n () {
    [ "${NNNLVL:-0}" -eq 0 ] || {
        echo "nnn is already running"
        return
    }

    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    command nnn "$@"

    [ ! -f "$NNN_TMPFILE" ] || {
        . "$NNN_TMPFILE"
        rm -f -- "$NNN_TMPFILE" > /dev/null
    }
}

# Fuzzy history search
fzf-history-widget() {
  local selected_cmd temp_cmd

  temp_cmd=$(fc -rln 1 | tac | fzf +s --height=70% --exact --tac --query "$LBUFFER" \
    --bind 'enter:accept' \
    --bind 'right:execute-silent(echo {} > ~/.fzf_right_arrow_cmd)+abort' \
    --bind 'ctrl-a:execute-silent(echo {} > ~/.fzf_ctrl_a_cmd)+abort' \
    --bind 'left:execute-silent(echo "$(echo {} | sed "s/[^ ]* *$//")" > ~/.fzf_left_arrow_cmd)+abort' \
    --bind 'ctrl-c:abort' \
    --bind 'ctrl-q:execute-silent(echo -n {} | xclip -selection clipboard)+abort'
    )

  if [[ $? -eq 0 ]]; then
    BUFFER=$temp_cmd
    zle accept-line

  elif [[ -f ~/.fzf_right_arrow_cmd ]]; then
    BUFFER="$(<~/.fzf_right_arrow_cmd) "
    rm ~/.fzf_right_arrow_cmd
    CURSOR=$#BUFFER
    zle redisplay

  elif [[ -f ~/.fzf_ctrl_a_cmd ]]; then
    BUFFER="$(<~/.fzf_ctrl_a_cmd)"
    rm ~/.fzf_ctrl_a_cmd
    CURSOR=0
    zle redisplay

  elif [[ -f ~/.fzf_left_arrow_cmd ]]; then
    BUFFER="$(<~/.fzf_left_arrow_cmd)"
    rm ~/.fzf_left_arrow_cmd
    CURSOR=$#BUFFER
    zle redisplay

  else
    BUFFER=""
    zle redisplay
  fi
}

tes() {
  result=$(fdfind -t d -E "/mnt" | fzf $1)
  cd $result
  unset result
}


# Various
export LS_COLORS="$(vivid generate dracula)"
export LC_ALL="C"


# Variables
if [[ -n $SSH_CONNECTION ]]; then
  export VISUAL='vim'
  export EDITOR='vim'
  export GIT_EDITOR='vim'
else
  export EDITOR="$(which nvim)"
  export VISUAL="$EDITOR"
  export GIT_EDITOR="$EDITOR"
fi

export BAT_CONFIG_PATH="$HOME/.config/bat/bat.conf"

# Long paths
hash -d h=/long/useless/path/to/project

# Startup
echo "kali" | figlet -f fraktur | boxes -d ian_jones -a hcvc -p h6v0 | lolcat -f -a -d 1 -p 5 -F 0.03 -S 110
lavat -g -c 292D3E -k 474E6B -s 8 -r 10 -R 5 -b 15 

# AWS autocomplete
export PATH=/usr/libexec/:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:$PATH
autoload bashcompinit && bashcompinit
autoload -Uz compinit && compinit
complete -C '/usr/libexec/aws_completer' aws

# Mamba more robust
export MAMBA_EXE='/home/kali/.local/bin/micromamba';
export MAMBA_ROOT_PREFIX='/home/kali/micromamba';
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    alias micromamba="$MAMBA_EXE" 
fi
unset __mamba_setup


# SDKMAN must be at the end
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"



############
### p10k ###
############

# Custom
function prompt_my_dir() {
    local dir=${${(%):-%~}//\~/}
    local dir_without_slashes=${dir//\//  }
    p10k segment -b 4 -f 7 -t "${dir_without_slashes//\%/%%}"
}


function prompt_custom_cached() {
  local cwd=${(%):-%~}
  local sep='  '
  local dir_icon=""
  local logic_path=""
  local display_path=""
  
  if [[ "$cwd" == "~" || "$cwd" == "$HOME" ]]; then
    dir_icon=""
    logic_path="" 
  elif [[ "$cwd" == "~/"* || "$cwd" == "$HOME/"* ]]; then
    dir_icon=""
    logic_path="${cwd:2}"  
  elif [[ "$cwd" == "/" ]]; then
    dir_icon="󰅬"
    logic_path="" 
  elif [[ "$cwd" == /* ]]; then
    dir_icon="󰅬"
    logic_path="${cwd:1}"  
  else
  fi

  display_path="${logic_path//\//${sep}}"
  local full_display="${dir_icon}${display_path:+ ${display_path}}"

  if (( ! TRUNCATE_ON )); then
    p10k segment -b 4 -f 7 -t "${full_display}"
    return
  fi

  local mtime=$(stat -c %Y -- "$cwd" 2>/dev/null)
  [[ -z $mtime ]] && mtime=0
  local cache_key="${cwd}::${mtime}"

  if _p9k_cache_stat_get prompt_custom "$cache_key"; then
    local truncated_path="${_p9k__cache_val[1]}"
  else
    local -a parts
    parts=("${(@s:/:)logic_path}")

    local last_index=$#parts
    for ((i=1; i < last_index; i++)); do
      [[ -n "${parts[i]}" ]] && parts[i]="${parts[i]:0:1}"
    done

    truncated_path="${(j:  :)parts}"

    _p9k_cache_stat_set "$truncated_path"
  fi

  local truncated_dir="${dir_icon}${truncated_path:+ ${truncated_path}}"

  p10k segment -b 4 -f 7 -t "${truncated_dir}"
}


############################
### Commands to remember ###
############################

zoxide jump = zi
async_flush_jobs worker
forgit
ctags -R . 



###############
### Various ###
###############

# Establish SSH connection
# sudo chmod 400 $HOME/Kali.pem
# ssh -o StrictHostKeyChecking=no -i Kali.pem kali@51.20.37.35
# ssh -L 5901:localhost:5901 -N -f -i kali.pem kali@51.20.37.35

# SSH connectivity issues
# ssh-keygen -f "/mnt/c/Users/nfs/.ssh/known_hosts" -R "51.20.37.35"
# ssh-keygen -f "/home/nicolafs/.ssh/known_hosts" -R "51.20.37.35"
# ipconfig /flushdns

# Commands for file sharing
# Web application instead of Desktop app in Google Credentials
# rclone config
# rclone lsd Drive:
# curl -L -o file.type https://drive.google.com/uc?id=id_here

# Remove VNC settings
# vncserver -list
# vncserver -kill :1
# sudo rm -rf $HOME/.vnc/passwd $HOME/.vnc/xstartup
# sudo rm -rf /tmp/.X*-lock /tmp/.X11-unix/X*
# sudo kill -9 $(ps aux | grep '[X]tightvnc' | awk '{print $2}')

# Setup RDP
# Add inbound RDP rule and reboot
# sudo apt-get install -y xrdp
# sudo systemctl enable xrdp

# Setup NX
# Add inbound custom TCP rule for port 4000 and reboot
# curl -O https://download.nomachine.com/download/8.10/Linux/nomachine_8.10.1_1_amd64.deb
# sudo apt-get install -y cups
# sudo dpkg -i nomachine_*.deb

# More backgrounds
# mkdir -p /usr/share/backgrounds/windows/
# sudo curl -o /usr/share/backgrounds/windows/windows-wallpaper-1.jpg https://raw.githubusercontent.com/somnico/kali/master/images/backgrounds/kali-actiniaria.png

# More fonts
# git clone --depth=1 --branch=master https://github.com/ryanoasis/nerd-fonts.git nerd-fonts
# ./nerd-fonts/install.sh FiraCode
# sudo cp -r nerd-fonts/patched-fonts/FiraCode/Regular /usr/share/fonts/truetype/firanerd
# sudo apt-get install -y fonts-powerline

# Install only one font family 
# sudo apt-get install -y subversion
# svn checkout --depth=empty https://github.com/ryanoasis/nerd-fonts/trunk/patched-fonts
# cd patched-fonts
# svn update --set-depth=infinity DejaVuSansMono
# cd ..
# sudo cp -r patched-fonts/DejaVuSansMono/Regular/DejaVuSansMNerdFontMono-Regular.ttf /usr/share/fonts/truetype/dejavu

# GUI updates
# xfdesktop -Q && xfdesktop &
# pkill xfce4-panel && xfce4-panel &

# Individual entries for qterminal 
# sudo sed -i 's/\(fontFamily=\).*/\1DejaVuSansM Nerd Font Mono/' $HOME/.config/qterminal.org/qterminal.ini

# Change syntax highlighting theme
# git clone https://github.com/dracula/zsh-syntax-highlighting.git
# sudo sed -i '/ZSH_THEME="powerlevel10k\/powerlevel10k"/a\
# \
# # Set Syntax Highlighting theme\
# source $HOME/zsh-syntax-highlighting/zsh-syntax-highlighting.sh' $HOME/.zshrc

# Docks
# sudo apt-get install -y cairo-dock plank

# Greetings
# fortune | cowsay -f "$(ls /usr/share/cowsay/cows | sort -R | head -1)" | lolcat -a -d 1
# echo "kali" | figlet -f fraktur | boxes -d twisted -a hcvc -p h6v1 | awk -v cols=$(tput cols) '{ printf "%*s\n", (cols + length) / 2, $0 }' | lolcat -f -a -d 1 -p 5 -F 0.03 -S 30
# fortune | cowsay -f calvin | boxes -d columns -a c | awk -v cols=$(tput cols) '{ printf "%*s\n", (cols + length) / 2, $0 }' | lolcat -a -d 1 -S 20
# fm6000 -dog -l 50 -say "$(echo "KALI" | figlet -f big)" | lolcat -a -d 1 -S 19
# fortune | cowsay -f "$(ls /usr/share/cowsay/cows | sort -R | head -1)" | while IFS= read -r line; do printf "%s" "$line" | while IFS= read -n1 -r char; do printf "%s" "$char"; sleep 0.0001; done; echo; done;
# neofetch --ascii $HOME/.config/neofetch/custom.txt

# Alternatives
# 3d_diagonal, Big_Money-ne, Chiseled, cosmike, doubleshorts, Elite, doubleshorts, fraktur, Georgia11, ghost, henry3d, lildevil, larry3d, lineblocks
# columns, ian_jones, twisted
# ascii, digit, extra, diagonal, alpha, stipple, technical, wide
# 2, 6, 7, 10, 12, 13, 17, 24

# AWS alternative
# mkdir -p $HOME/.aws/
# sudo curl -L -o $HOME/.aws/config https://drive.google.com/uc?id=
# sudo curl -L -o $HOME/.aws/credentials https://drive.google.com/uc?id=

# Various 
# xfconf-query -c xfce4-desktop -p /desktop-icons/gravity --create -t int -s 1
# xfconf-query -c xsettings -p /Net/PreferredApplications/TextEditor -n -t string -s "org.xfce.mousepad.desktop" 
# xfdesktop -A  

# Xfconf reference
# for channel in $( xfconf-query --list | tail --lines=+2 | sort ); do printf -- '\n\e[1;36m%s\e[m\n' "${channel}"; xfconf-query --list --verbose --channel "${channel}"; done

# Keybind reference
# https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets
# $HOME/.oh-my-zsh/lib/key-bindings.zsh
# bindkey 
# showkey --ascii
# man ascii

# Consistent gist links
# gistusercontent/raw or gistusercontent/raw/filename 

# Blinking
# echo -e "\e[5mBlinking Text\e[25m" 
